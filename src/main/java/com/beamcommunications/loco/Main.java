/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.beamcommunications.loco;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Map;
import java.util.TreeMap;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author swhitehead
 */
public class Main {

	public static void main(String[] args) throws IOException {
		new Main();
	}

	private Workbook workbook;
	private Sheet sheet;

	public Main() throws IOException {
		workbook = WorkbookFactory.create(new File("Loco.xlsx"));
		sheet = workbook.getSheetAt(0);
		int iosKeysColumn = 2;
		int androidKeysColumn = 3;
		int languagesStartColumn = 4;
		int languagesEndColumn = languagesStartColumn;

		Row row = sheet.getRow(0);
		while (row.getCell(languagesEndColumn) != null) {
			languagesEndColumn++;
		}
		for (int index = languagesStartColumn; index < languagesEndColumn; index++) {
			String name = row.getCell(index).getStringCellValue();
			formatIos(name, iosKeysColumn, index);
		}
	}

	protected String getValue(int rowIndex, int column) {
		Row row = sheet.getRow(rowIndex);
		if (row == null) {
			return null;
		}
		Cell cell = row.getCell(column);
		if (cell == null) {
			return null;
		}
		return cell.getStringCellValue();
	}

	public Map<String, String> mapLanguage(int keyColumn, int languageColumn) {
		Map<String, String> map = new TreeMap<>();
		String key = null;
		int rowIndex = 1;
		do {
			key = getValue(rowIndex, keyColumn);
			if (key == null) {
				continue;
			}
			String value = getValue(rowIndex, languageColumn);
			map.put(key, value);
			rowIndex++;
		} while (key != null);
		return map;
	}

	protected String dateTimeStamp() {
		return LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));
	}

	public void formatIos(String language, int keyColumn, int languageColumn) {
		Map<String, String> map = mapLanguage(keyColumn, languageColumn);
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(new File(language + ".strings")))) {
			bw.write("/*");
			bw.newLine();
			bw.write("\tAutogenerated localisation for " + language);
			bw.newLine();
			bw.write("\tExported on " + dateTimeStamp());
			bw.newLine();
			bw.write("*/");
			bw.newLine();
			bw.newLine();
			for (Map.Entry<String, String> entry : map.entrySet()) {
				String key = entry.getKey();
				String value = entry.getValue();
				bw.write("\"" + key + "\" = \"" + value + "\";");
				bw.newLine();
			}
		} catch (IOException exp) {
			exp.printStackTrace();
		}
	}

}
