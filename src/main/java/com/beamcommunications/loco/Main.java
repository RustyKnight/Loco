/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.beamcommunications.loco;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author swhitehead
 */
public class Main {

	public static int DESCRIPTION_COLUMN = 0;
	public static int COMMENT_COLUMN = 1;
	public static int IOS_KEY_COLUMN = 2;
	public static int ANDROID_KEY_COLUMN = 3;
	
	public static void main(String[] args) throws IOException {
		new Main();
	}

	private Workbook workbook;
	private Sheet sheet;

	public Main() throws IOException {
		workbook = WorkbookFactory.create(new File("Loco.xlsx"));
		sheet = workbook.getSheetAt(0);
		int languagesStartColumn = 4;
		int languagesEndColumn = languagesStartColumn;

		Row row = sheet.getRow(0);
		while (row.getCell(languagesEndColumn) != null) {
			languagesEndColumn++;
		}
		for (int index = languagesStartColumn; index < languagesEndColumn; index++) {
			String name = row.getCell(index).getStringCellValue();
			formatIos(name, IOS_KEY_COLUMN, index);
		}
	}

	protected String getValue(int rowIndex, int column) {
		Row row = sheet.getRow(rowIndex);
		if (row == null) {
			return null;
		}
		Cell cell = row.getCell(column);
		if (cell == null) {
			return null;
		}
		return cell.getStringCellValue();
	}

	public List<Localisation> mapLanguage(int keyColumn, int languageColumn) {
		List<Localisation> entries = new ArrayList<>(25);
		String key = null;
		int rowIndex = 1;
		do {
			key = getValue(rowIndex, keyColumn);
			if (key == null) {
				continue;
			}
			String description = getValue(rowIndex, DESCRIPTION_COLUMN);
			String comment = getValue(rowIndex, COMMENT_COLUMN);
			String value = getValue(rowIndex, languageColumn);
			
			Localisation loco = new Localisation(key, value, comment, description);
			
			entries.add(loco);
			rowIndex++;
		} while (key != null);
		
		Collections.sort(entries, new Comparator<Localisation>() {
			@Override
			public int compare(Localisation o1, Localisation o2) {
				return o1.getKey().compareTo(o2.getKey());
			}
		});
		
		return entries;
	}

	protected String dateTimeStamp() {
		return LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));
	}

	public void formatIos(String language, int keyColumn, int languageColumn) {
		List<Localisation> entries = mapLanguage(keyColumn, languageColumn);
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(new File(language + ".strings")))) {
			bw.write("/*");
			bw.newLine();
			bw.write("\tAutogenerated localisation for " + language);
			bw.newLine();
			bw.write("\tExported on " + dateTimeStamp());
			bw.newLine();
			bw.write("*/");
			bw.newLine();
			bw.newLine();
			for (Localisation loco : entries) {
				String description = loco.getDescription();
				String comment = loco.getComment();
				
				if (description != null) {
					bw.write("// " + description);
					bw.newLine();
				}
				
				String key = loco.getKey();
				String value = loco.getValue();
				bw.write("\"" + key + "\" = \"" + value + "\";");
				bw.newLine();
			}
		} catch (IOException exp) {
			exp.printStackTrace();
		}
	}
	
	public class Localisation {
		private String key;
		private String value;
		private String comment;
		private String description;

		public Localisation(String key, String value, String comment, String description) {
			this.key = key;
			this.value = value;
			this.comment = comment;
			this.description = description;
		}

		public String getKey() {
			return key;
		}

		public String getValue() {
			return value;
		}

		public String getComment() {
			return comment;
		}

		public String getDescription() {
			return description;
		}
		
		
	}

}
